<field>
  <div class={ classes({ 'eden-field eden-block' : true, 'eden-field-admin eden-block-admin' : !props.preview }) } data-field={ props.field.uuid } id={ `field-${opts.field.uuid}` }>

    <div class={ `eden-field-hover eden-block-hover${props.isContainer ? ' eden-block-hover-dropzone' : ''}` } if={ !props.preview }>
      <div class="row row-eq-height">
        <div class="col-8 d-flex align-items-center">
          <div class="w-100">
            <slot name="header" />
          </div>
        </div>
        <div class="col-4 d-flex align-items-center">
          <div class="w-100">
            <div class="btn-group float-right">
              <slot name="buttons" />
              <button class="btn btn-sm btn-secondary" onclick={ (e) => onUpdateSidebar(e) }>
                <i class="fa fa-pencil-alt" />
              </button>
              <button class="btn btn-sm btn-secondary" onclick={ (e) => onRemoveSidebar(e) } if={ !props.field.force }>
                <i class={ classes({ 'fa fa-times' : true, 'fa-spin' : removing || props.field.removing }) } />
              </button>
              <span class="btn btn-sm btn-secondary move" for={ props.field.uuid }>
                <i class="fa fa-arrows-alt" />
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div show={ shouldShow() }>
      <slot name="body" />
    </div>
  </div>

  <div class="eden-blocks-backdrop" if={ showing } onclick={ (e) => ohHideSidebar(e) } />

  <div class={ classes({ 'eden-blocks-sidebar' : true, 'eden-blocks-sidebar-show' : sidebar.update  }) } ref="update" if={ showing && !props.preview }>
    <div class="card">
      <div class="card-header">
        <h5 class="m-0">
          Update Field
        </h5>
      </div>
      <div class="card-body h-50">
      
        <div class="form-group">
          <label>
            Name
          </label>
          <input class="form-control" ref="name" value={ props.field.name } onchange={ (e) => onName(e) } />
        </div>

        <slot name="modal" />
      
      </div>
      
      <div class="card-header border-top">
        
        <nav class="nav nav-tabs card-header-tabs">
          <a each={ (tab, i) in this.tabs } class={ classes({ 'nav-item nav-link' : true, 'active' : isTab(tab) }) } href="#" onclick={ (e) => onTab(e, tab) }>{ tab }</a>
        </nav>
        
      </div>
      <div class="card-body">

        <div is={ `field-tab-${tab.toLowerCase()}` } field={ props.field } data={ props.data } is-input={ props.isInput } is-multiple={ props.isMultiple } on-save={ props.onSave } i18n={ props.i18n || props.language } />
        
      </div>
      <div class="card-footer">
        <button class={ classes({ 'btn btn-secondary float-right' : true, 'disabled' : removing }) } onclick={ hide } disabled={ removing }>
          Close
        </button>
      </div>
    </div>
  </div>

  <div class={ classes({ 'eden-blocks-sidebar' : true, 'eden-blocks-sidebar-show' : sidebar.remove }) } if={ showing && !props.preview }>
    <div class="card">
      <div class="card-header">
        <h5 class="m-0">
          Remove Field
        </h5>
      </div>
      <div class="card-body">
        Are you sure you want to remove this field?
      </div>
      <div class="card-footer">
        <button class={ classes({ 'btn btn-danger' : true, 'disabled' : removing }) } onclick={ (e) => onRemove(e) } disabled={ removing }>
          { removing ? 'Removing...' : 'Remove' }
        </button>
      </div>
    </div>
  </div>

  <script>
    // import default
    import Base from './js/base';

    // export default
    export default class Field extends Base {
      
      /**
       * on before mount
       */
      onBeforeMount(props) {
        // run super
        super.onBeforeMount(...arguments);

        // set variables
        this.tabs = props.tabs || ['Display', 'Validation', 'Visibility', 'Events'];
        this.sidebar = {};
        this.updating = {};
          
        // set tab
        this.tab = this.tabs[0];
      }

      /**
       * on display
       *
       * @param {Event} e
       */
      async onName (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.name = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on update modal
       *
       * @param  {Event} e
       */
      onUpdateSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = true;

        // update view
        this.update();
        this.sidebar.update = true;
        this.sidebar.remove = false;

        // update view
        this.update();
      }

      /**
       * on remove modal
       *
       * @param  {Event} e
       */
      onRemoveSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = true;

        // update view
        this.update();
        this.sidebar.update = false;
        this.sidebar.remove = true;

        // update view
        this.update();
      }

      /**
       * on remove modal
       *
       * @param  {Event} e
       */
      ohHideSidebar(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = false;

        // update view
        this.update();
        this.sidebar.update = false;
        this.sidebar.remove = false;

        // update view
        this.update();
      }

      /**
       * on refresh
       *
       * @param  {Event} e
       */
      async onRemove (e) {
        // set refreshing
        this.removing = true;

        // update view
        this.update();

        // run opts
        if (this.props.onRemove) await this.props.onRemove(this.props.field, this.props.data, this.props.placement);

        // set refreshing
        this.removing = false;

        // update view
        this.update();
      }

      /**
       * should show
       *
       * @return {*}
       */
      shouldShow() {
        // should show
        if (this.props.shouldShow) return this.props.shouldShow();

        // return true
        if (!this.props.field.visible || !this.props.field.visible.length) return true;

        // check preview
        if (!this.props.preview) return true;

        // bind to this
        const fn = new Function(`return ${this.props.field.visible}`);

        // bind function
        fn.bind(this);

        // set should
        return fn.call(this);
      }

      /**
       * is tab
       *
       * @param  {String} tab
       *
       * @return {Boolean}
       */
      isTab(tab) {
        // return is tab
        return this.tab === tab;
      }

      /**
       * on tab
       *
       * @param  {Event} e
       * @return {*}
       */
      onTab(e, tab) {
        // set tab
        this.tab = tab;
        
        // update view
        this.update();
      }
      
      /**
       * on field
       *
       * @param  {Event} e
       * @return {*}
       */
      field() {
        // return field
        return this.props.field;
      }

      /**
       * on data
       *
       * @param  {Event} e
       * @return {*}
       */
      data() {
        // return field
        return this.props.data;
      }
    }
  </script>
</field>
