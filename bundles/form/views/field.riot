<field>
  <div class={ classes({ 'eden-field eden-block' : true, 'eden-field-admin eden-block-admin' : !props.preview }) } data-field={ props.field.uuid } id={ `field-${props.field.uuid}` }>

    <div class={ `eden-field-hover eden-block-hover${props.isContainer ? ' eden-block-hover-dropzone' : ''}` } if={ !props.preview }>
      <div class="row row-eq-height">
        <div class="col-8 d-flex align-items-center">
          <div class="w-100">
            <slot name="header" />
          </div>
        </div>
        <div class="col-4 d-flex align-items-center">
          <div class="w-100">
            <div class="btn-group float-right"> 
              <slot name="buttons" />
              <button class="btn btn-sm btn-primary" onclick={ (e) => onUpdateSidebar(e) }>
                <i class="fa fa-pencil-alt" />
              </button>
              <button class="btn btn-sm btn-primary" onclick={ (e) => onRemoveSidebar(e) } if={ !props.field.force }>
                <i class={ classes({ 'fa fa-times' : true, 'fa-spin' : removing || props.field.removing }) } />
              </button>
              <span class="btn btn-sm btn-primary move" for={ props.field.uuid }>
                <i class="fa fa-arrows-alt" />
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div show={ shouldShow() }>
      <slot name="body" />
    </div>
  </div>

  <div ref="update" class="modal fade" if={ sidebar.update && !props.preview }>
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="m-0">
            Update Field
          </h5>
        </div>
        <div class="modal-body">
        
          <div class="form-group">
            <label>
              Name
            </label>
            <input class="form-control" ref="name" value={ get('field.name', '') } onchange={ (e) => onName(e) } />
          </div>

          <slot name="modal" />
        
        </div>
        
        <div class="modal-header border-top">
          
          <nav class="nav nav-tabs">
            <a each={ (t, i) in this.tabs } class={ classes({ 'nav-item nav-link' : true, 'active' : isTab(t) }) } href="#" onclick={ (e) => onTab(e, t) }>{ t }</a>
          </nav>
          
        </div>
        <div class="modal-body">

          <div is={ `field-tab-${tab.toLowerCase()}` } field={ props.field } data={ props.data } is-input={ props.isInput } is-multiple={ props.isMultiple } on-save={ props.onSave } i18n={ props.i18n || props.language } />
          
        </div>
        <div class="modal-footer">
          <button class={ classes({ 'btn btn-secondary float-right' : true, 'disabled' : loading('update') }) } onclick={ (e) => onHideSidebar(e) } disabled={ loading('update') }>
            Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <div ref="remove" class="modal fade" if={ sidebar.remove && !props.preview }>
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="m-0">
            Remove Field
          </h5>
        </div>
        <div class="modal-body">
          Are you sure you want to remove this field?
        </div>
        <div class="modal-footer">
          <button class={ classes({ 'btn btn-danger' : true, 'disabled' : loading('remove') }) } onclick={ (e) => onRemove(e) } disabled={ loading('remove') }>
            { loading('remove') ? 'Removing...' : 'Remove' }
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // import default
    import Base from './js/base';

    // export default
    export default class Field extends Base {
      
      /**
       * on before mount
       */
      onBeforeMount(props) {
        // run super
        super.onBeforeMount(...arguments);

        // set variables
        this.tabs = props.tabs || ['Display', 'Validation', 'Visibility', 'Events'];
        this.sidebar = {};
        this.updating = {};

        // bind
        this.isTab = this.isTab.bind(this);
        this.onTab = this.onTab.bind(this);
          
        // set tab
        this.tab = this.tabs[0];
      }

      /**
       * on display
       *
       * @param {Event} e
       */
      async onName (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.name = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on update modal
       *
       * @param  {Event} e
       */
      onUpdateSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update view
        this.sidebar.update = true;
        this.sidebar.remove = false;

        // update view
        this.update();

        // show modal
        $(this.$('[ref="update"]')).modal('show');
      }

      /**
       * on remove modal
       *
       * @param  {Event} e
       */
      onRemoveSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update view
        this.sidebar.update = false;
        this.sidebar.remove = true;

        // update view
        this.update();

        // show modal
        $(this.$('[ref="remove"]')).modal('show');
      }

      /**
       * on remove modal
       *
       * @param  {Event} e
       */
      onHideSidebar(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // show modal
        $(this.$('.modal')).on('hidden.bs.modal', () => {
          // set class
          this.showing = false;
          this.sidebar.update = false;
          this.sidebar.remove = false;

          // update view
          this.update();
        }).modal('hide');
      }

      /**
       * on refresh
       *
       * @param  {Event} e
       */
      async onRemove (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set refreshing
        this.loading('remove', true);

        // show modal
        $(this.$('[ref="remove"]')).modal('hide');

        // run opts
        if (this.props.onRemove) await this.props.onRemove(this.props.field, this.props.data, this.props.placement);

        // set refreshing
        this.loading('remove', false);
      }

      /**
       * should show
       *
       * @return {*}
       */
      shouldShow() {
        // should show
        if (this.props.shouldShow) return this.props.shouldShow();

        // return true
        if (!this.props.field.visible || !this.props.field.visible.length) return true;

        // check preview
        if (!this.props.preview) return true;

        // bind to this
        const fn = new Function(`return ${this.props.field.visible}`);

        // bind function
        fn.bind(this);

        // set should
        return fn.call(this);
      }

      /**
       * is tab
       *
       * @param  {String} tab
       *
       * @return {Boolean}
       */
      isTab(tab) {
        // return is tab
        return this.tab === tab;
      }

      /**
       * on tab
       *
       * @param  {Event} e
       * @return {*}
       */
      onTab(e, tab) {
        // set tab
        this.tab = tab;
        
        // update view
        this.update();
      }
      
      /**
       * on field
       *
       * @param  {Event} e
       * @return {*}
       */
      field() {
        // return field
        return this.props.field;
      }

      /**
       * on data
       *
       * @param  {Event} e
       * @return {*}
       */
      data() {
        // return field
        return this.props.data;
      }
    }
  </script>
</field>
