<eden-field-input>
  <div if={ props.getField(props.field) } class={ classes({ 'eden-field eden-block' : true, 'eden-field-admin eden-block-admin' : !props.preview }) } data-field={ props.field.uuid } data-type={ props.field.type } id={ `field-${props.field.uuid}` }>
    <div class="eden-field-hover eden-block-hover" if={ !props.preview }>
      <div class="d-flex align-items-center">
        <div class="mr-2">
          <div class="btn-group"> 
            <button class="btn btn-sm btn-info" onclick={ (e) => props.updateAction(e, props.field) }>
              { props.getField(props.field).title } Field
            </button>
          </div>
        </div>
        <div class="ml-auto">
          <div class="btn-group"> 
            <button class="btn btn-sm btn-primary" onclick={ (e) => props.updateAction(e, props.field) }>
              <i class="fa fa-pencil-alt" />
            </button>
            <button class="btn btn-sm btn-primary" onclick={ (e) => onToggleCol(e) } data-toggle="tooltip" data-placement="top" data-original-title={ props.field.col ? 'Expand Field' : 'Compress Field' }>
              <i class={ classes({ 'fa' : true, 'fa-compress-wide' : !props.field.col, 'fa-expand-wide' : props.field.col }) } />
            </button>
            <button class="btn btn-sm btn-primary" onclick={ (e) => onToggleBreak(e) } data-toggle="tooltip" data-placement="top" data-original-title={ props.field.col ? 'Break after Field' : 'No Break after Field' }>
              <i class={ classes({ 'fa' : true, 'fa-file' : !props.field.break, 'fa-page-break' : props.field.break }) } />
            </button>
            <button class="btn btn-sm btn-primary" onclick={ (e) => props.removeAction(e,  props.field) }>
              <i class={ classes({ 'fa fa-times' : true, 'fa-spin' : removing }) } />
            </button>
            <span class="btn btn-sm btn-primary move" for={ props.field.uuid }>
              <i class="fa fa-arrows-alt" />
            </span>
          </div>
        </div>
      </div>
    </div>

    <div is={ getBody() } { ...getProps() } />
  </div>

  <script>
    // base class
    import Base from '../../js/base';

    /**
     * eden field input class
     */
    export default class EdenFieldInput extends Base {

      /**
       * gets body
       */
      getBody() {
        // get actual field
        const actualField = this.props.getField(this.props.field);

        // return body field
        return `field-${actualField.view || actualField.type}-input`;
      }

      /**
       * gets body
       */
      getProps() {
        // gets props
        const newProps = { ...(this.props) };

        // delete is and class
        delete newProps.is;
        delete newProps.id;
        delete newProps.class;

        // return body field
        return newProps;
      }

      /**
       * on allow multiple
       *
       * @param  {Event}  e
       *
       * @return {Promise}
       */
      onToggleCol (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.col = !this.props.field.col;

        // run opts
        this.props.set('col', this.props.field.col);
      }

      /**
       * on allow multiple
       *
       * @param  {Event}  e
       *
       * @return {Promise}
       */
      onToggleBreak (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.break = !this.props.field.break;

        // run opts
        this.props.set('break', this.props.field.break);
      }
    }
  </script>
</eden-field-input>