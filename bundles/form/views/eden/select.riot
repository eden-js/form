<eden-select>
  <input type="hidden" class="d-none" each={ (item, i) in selected } name={ props.multiple ? `${props.name}[${i}]` : props.name } value={ item.value } />
  <div class="droppdown">
    <button class="form-select text-overflow text-left" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" onclick={ (e) => onShow(e) }>
      <span each={ (item, i) in selected } class="mr-2 d-inline-flex align-items-center">
        <span if={ item.color } class={ `badge bg-${item.color} mr-2` }>
          &nbsp;
        </span>
        <span if={ !item.html }>
          { item.title || item.text || item.name }
        </span>
        <raw if={ item.html } data={ { html : item.html } } />
        { i < (selected.length - 1) ? ',' : '' }
      </span>
      <span if={ props.placeholder && !selected.length }>
        { props.placeholder }
      </span>
    </button>
    <div class="dropdown-menu">
      <div class="mb-2 p-2">
        <input class="form-control" placeholder="Search" onkeyup={ (e) => onSearch(e) } />
      </div>
      <button each={ (item, i) in getItems() } class={ classes({ 'dropdown-item d-flex align-items-center' : true, 'active' : isSelected(item) }) } onclick={ (e) => onToggle(e, item) }>
        <span if={ item.color } class={ `badge bg-${item.color} mr-2` }>
          &nbsp;
        </span>
        <span if={ !item.html }>
          { item.title || item.text || item.name }
        </span>
        <raw if={ item.html } data={ { html : item.html } } />
      </button>
    </div>
  </div>
  

  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class EdenSelect extends Base {

      /**
       * on before mount
       */
      onBeforeMount(props) {
        // on before mount
        super.onBeforeMount(...arguments);

        // set initialized
        this.initialized = false;

        // set data
        this.data = props.data || [];

        // get selected
        this.selected = [...(this.data)].filter((item) => item.selected);
      }

      /**
       * on mounted
       */
      async onMounted(props) {
        // check frontend
        if (!this.eden.frontend || this.initialized) return;

        // initialized
        this.initialized = true;

        // load
        await this.load();
      }

      /**
       * on show
       */
      onShow(e) {
        // set width
        $(this.$('.dropdown-menu')).width($(this.$('.droppdown')).width());
        $(this.$('.form-control')).focus();
      }

      /**
       * on search
       */
      onSearch(e) {
        // update search
        this.update({
          search : e.target.value,
        });

        // load data
        this.load();
      }

      /**
       * toggle value
       */
      onToggle(e, item) {
        // check
        if (this.props.multiple) {
          e.preventDefault();
          e.stopPropagation();
        }

        // check selected
        item.selected = !this.isSelected(item);

        // filter by value
        this.selected = this.selected.filter((i) => i.value !== item.value);

        // get selected
        if (item.selected) {
          // push item
          this.selected.push(item);
        }

        // update
        this.update();

        // on change
        if (this.props.onChange) {
          // value
          this.props.onChange(e, this.val());
        }
      }

      /**
       * is selected
       */
      isSelected(item) {
        // check selected
        return this.selected.find((s) => s.value === item.value);
      }

      /**
       * get items
       */
      getItems() {
        // filter items
        return [...(this.data)].filter((item) => {
          // return search
          return !this.state.search || (item.title || item.text || item.name).toLowerCase().includes(this.state.search.toLowerCase())
        });
      }

      /**
       * loads data
       */
      async load() {
        // set data
        let data = this.props.data;

        // url
        if (this.props.url) {
          // await fetch
          const res = await fetch(`${this.props.url}?q=${this.state.search || ''}`);
          data = await res.json();
        }

        // load
        if (this.props.load) {
          // load from function
          data = await this.props.load(this.state.search || '');
        }

        // set data
        this.data = data.map((item) => {
          // check if selected
          if (((this.props.data || []).find((l) => l.value === item.value) || {}).selected) {
            item.selected = true;
          }

          // return item
          return item;
        });
        this.update();
      }
    
      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // return value
        const value = this.selected.map((v) => v.value);

        // return value
        if (this.props.multiple) return value;

        // return first
        return value[0];
      }
    }
  </script>
</eden-select>
