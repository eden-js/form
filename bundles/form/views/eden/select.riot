<eden-select>
  <select class="selectpicker show-tick form-control" name={ props.name } multiple />

  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class EdenSelect extends Base {

      /**
       * on before mount
       */
      onBeforeMount(props) {
        // on before mount
        super.onBeforeMount(...arguments);

        // set initialized
        this.initialized = false;

        // set data
        this.data = props.data || [];
      }

      /**
       * on mounted
       */
      async onMounted(props) {
        // check frontend
        if (!this.eden.frontend || this.initialized) return;

        // initialized
        this.initialized = true;

        // set jQuery
        window.jQuery = window.$;

        // url
        if (this.props.url) {
          // await fetch
          const res = await fetch(this.props.url);
          const data = (await res.json()).map((item) => {
            // check if selected
            if (((this.data || []).find((l) => l.value === item.value) || {}).selected) {
              item.selected = true;
            }

            // return item
            return item;
          });

          // set data
          this.data = data;
        }

        // append
        if (this.data && this.data.length) {
          // set data
          let data = this.data;

          // check sort
          if (!this.props.noSort) {
            // sort
            data = this.data.sort((a, b) => {
              // return
              return (a.name || a.text || '').localeCompare(b.name || b.text || '');
            });
          }

          // for each
          data.forEach((item) => {
            // append
            $(this.$('select')).append(`<option value="${item.value}"${item.selected ? ` selected` : ''}>${item.name || item.text}</option>`);
          });
        }

        // require logic
        require('bootstrap-select/js/bootstrap-select.js');

        // opts
        const opts = {
          header           : this.props.placeholder,
          multiple         : true,
          liveSearch       : true,
          noneSelectedText : this.props.placeholder,
        };
        
        // multiple
        if (!this.props.multiple) {
          // max
          opts.maxOptions = 1;
        }

        // do select 2
        $(this.$('select')).selectpicker(opts).on('change', (e) => {
          // check value
          const value = $(this.$('select')).selectpicker('val');

          // on change
          if (this.props.onChange) this.props.onChange(e, this.props.multiple ? value : value[0]);
        });

        // ajax
        if (this.props.url) {
          // require ajax
          require('ajax-bootstrap-select/dist/js/ajax-bootstrap-select.min.js');

          // add ajax logic
          $(this.$('select')).ajaxSelectPicker({
            ajax : {
              url  : this.props.url,
              type : 'GET',
              data : () => {
                // create params
                const params = {
                  q : '{{{q}}}'
                };

                // return params
                return params;
              },
              dataType : 'json',
            },
            locale : {
              emptyTitle : this.props.placeholder
            },
            minLength    : 0,
            clearOnEmpty : true,
            emptyRequest : true,
          })

          // trigger change
          $(this.$('.bs-searchbox .form-control')).trigger('keyup');
        }
      }

      /**
       * check should update
       */
      shouldUpdate(data) {
        // check initialized
        return !this.initialized;
      }
    
      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // return value
        const value = $(this.$('select')).selectpicker('val');

        // return value
        if (this.props.multiple) return value;

        // return first
        return value[0];
      }
    }
  </script>
</eden-select>
