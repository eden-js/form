<eden-fields>
  <div class="eden-fields eden-blocks">

    <div class={ `${ classes({ 'empty' : !getFields().length, 'eden-dropzone' : !props.preview }) }` } ref="form" data-placement="" if={ !updating }>
      <span class="eden-dropzone-label" if={ !props.preview }>
        { form.get('title') || form.get('placement') }
      </span>
      
      <eden-add type="top" onclick={ (e) => onAddField(e) } way="unshift" form="" if={ !props.preview } />
      <div each={ (el, i) in getFields() } el={ el } no-reorder class={ el.class } data-is={ getElement(el) } preview={ preview } data-field={ el.uuid } data={ getField(el) } field={ el } helper={ helper } get-field={ getField } on-add-field={ onAddField } on-save={ onSaveField } on-remove={ onRemoveField } on-refresh={ onRefreshField } on-update={ onUpdate } placement={ i } i={ i } />
      <eden-add type="bottom" onclick={ (e) => onAddField(e) } way="push" form="" if={ !props.preview } />
    </div>
  </div>

  <field-sidebar ref={ ref('sidebar') } fields={ props.fields } add-field={ onSetField } />

  <script>
    // import base
    import Base from '../js/base';
    import uuid from 'uuid';

    // export default
    export default class EdenFields extends Base {

      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // super on before mount
        super.onBeforeMount(...arguments);

        // set update
        this.form     = props.form ? (props.model ? this.parent.form : this.eden.get('model.get')('form', props.form.id, props.form)) : this.model('form', null, {});
        this.type     = props.type;
        this.fields   = (props.form || {}).render || [];
        this.loading  = {};
        this.preview  = !!props.preview;
        this.updating = false;
      }

      /**
       * on updated
       *
       * @param {Object} props
       */
      onUpdated(props) {
        // super on before mount
        super.onUpdated(...arguments);

        // check frontend
        if (!this.eden.frontend) return;
        
        // check has change
        if (this.hasChange()) {
          // on mounted
          this.onMounted();
        }
      }

      /**
       * on mounted
       *
       * @param {Object} props
       */
      onMounted(props) {
        // super on before mount
        super.onMounted(...arguments);

        // check frontend
        if (!this.eden.frontend) return;

        // set form
        this.form = props.form ? (props.model ? this.parent.form : this.eden.get('model.get')('form', props.form.id, props.form)) : this.eden.get('model.get')('form', null, {});

        // init dragula
        if (!this.dragula && this.eden.get('user.acl.validate')('admin')) this.initDragula();

        // set default positions
        if (props.positions && !(this.form.get('positions') || []).length && !this.form.get('id')) {
          // set default
          this.form.set('positions', props.positions);
          this.form.set('fields', (this.form.get('positions') || []).reduce(this.filter.flatten, []));

          // save fields
          this.saveForm();
        }

        // set positions
        if (this.hasChange()) {
          // set position
          this.type    = props.type;
          this.preview = !!props.preview;

          // force update
          this.update();
        }

        // check fields
        if (this.helper.shouldLoad()) {
          // load fields
          this.loadFields();
        }
      }

      /**
       * get field data
       *
       * @param  {Object} field
       *
       * @return {*}
       */
      getField (field) {
        // return on no field
        if (!field) return;

        // get found
        let found = this.fields.find((b) => b.uuid === field.uuid || (field.name && b.name && field.name === b.name));

        // gets data for field
        if (!found) return null;

        // return found
        return found;
      }

      /**
       * get element
       *
       * @param  {Object} child
       *
       * @return {*}
       */
      getElement (child) {
        // return get child
        return (this.getField(child) || {}).tag ? `field-${this.getField(child).tag}` : 'eden-loading';
      }

      /**
       * get fields
       *
       * @return {Array}
       */
      getFields () {
        // return filtered fields
        return (this.form.get('positions') || []).map(this.filter.fix).filter((field) => field);
      }

      /**
       * on add field
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onAddField (e) {
        // get target
        let target = !jQuery(e.target).is('eden-add') ? jQuery(e.target).closest('eden-add') : jQuery(e.target);

        // way
        this.way      = target.attr('way');
        this.fieldPos = target.attr('placement');

        // open modal
        this.refs.sidebar.show();
      }

      /**
       * on refresh field
       *
       * @param  {Event}  e
       * @param  {Object} field
       */
      async onSaveField (field, data, form, preventUpdate) {
        // clone
        let fieldClone = Object.assign({}, field);

        // prevent update check
        if (!preventUpdate) {
          // set loading
          field.saving = true;

          // update view
          this.update();
        }

        // log data
        let res = await fetch('/form/' + this.form.get('id') + '/field/save', {
          'body' : JSON.stringify({
            'data'  : data,
            'field' : fieldClone
          }),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let result = await res.json();

        // set logic
        for (let key in result.result) {
          // clone to form
          data[key] = result.result[key];
        }

        // set to fields
        if (!this.fields.find((b) => b.uuid === data.uuid)) this.fields.push(data);
        
        // set flat
        this.form.set('positions', (this.form.get('positions') || []).map(this.filter.replace(fieldClone)));
        this.form.set('fields', (this.form.get('positions') || []).reduce(this.filter.flatten, []));

        // save form
        await this.saveForm(preventUpdate);

        // check prevent update
        if (!preventUpdate) {
          // set loading
          delete field.saving;

          // update view
          this.update();
        }
      }

      /**
       * on refresh field
       *
       * @param  {Event}  e
       * @param  {Object} field
       */
      async onRefreshField (field, data) {
        // set loading
        field.refreshing = true;

        // update view
        this.update();

        // log data
        let res = await fetch('/form/' + this.form.get('id') + '/field/save', {
          'body' : JSON.stringify({
            'data'  : data,
            'field' : field
          }),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let result = await res.json();

        // set logic
        for (let key in result.result) {
          // clone to form
          data[key] = result.result[key];
        }

        // set loading
        delete field.refreshing;

        // update view
        this.update();
      }

      /**
       * on refresh field
       *
       * @param  {Event}  e
       * @param  {Object} field
       */
      async onRemoveField (field, data, form) {
        // get uuid
        const dotProp = require('dot-prop-immutable');

        // set loading
        field.removing = true;

        // update view
        this.update();

        // log data
        let res = await fetch('/form/' + this.form.get('id') + '/field/remove', {
          'body' : JSON.stringify({
            'data'  : data,
            'field' : field
          }),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let result = await res.json();

        // get positions
        let positions = (this.form.get('positions') || []).map(this.filter.fix).filter((field) => field);

        // set moving on field
        positions = dotProp.set(positions, form + '.removing', true);

        // get positions
        this.form.set('positions', positions.map(this.filter.place).filter((field) => field));
        this.form.set('fields', (this.form.get('positions') || []).reduce(this.filter.flatten, []));

        // save form
        await this.saveForm();
      }

      /**
       * adds field by type
       *
       * @param  {String} type
       *
       * @return {*}
       */
      async onSetField (type) {
        // get uuid
        const dotProp = require('dot-prop-immutable');

        // create field
        let field = {
          'uuid' : uuid(),
          'type' : type
        };

        // check positions
        if (!this.form.get('positions')) this.form.set('positions', []);

        // get from position
        let pos = (this.fieldPos || '').length ? dotProp.get(this.form.get('positions'), this.fieldPos) : this.form.get('positions');

        // force pos to exist
        if (!pos && (this.fieldPos || '').length) {
          // set pos
          pos = [];

          // set
          dotProp.set(this.form.get('positions'), this.fieldPos, pos);
        }

        // do thing
        pos[this.way](field);

        // set flat
        this.form.set('fields', (this.form.get('positions') || []).reduce(this.filter.flatten, []));

        // save form
        await this.onSaveField(field, {});

        // update view
        this.update();
      }

      /**
       * adds field by type
       *
       * @param  {String} type
       *
       * @return {*}
       */
      async onUpdate () {
        // update view
        this.update();
      }

      /**
       * saves form
       *
       * @return {Promise}
       */
      async saveForm (preventRefresh) {
        // set loading
        this.loading('save', true);

        // check type
        if (!this.form.type) this.form.set('type', this.props.type);

        // log data
        let res = await fetch('/form/' + (this.form.get('id') ? this.form.get('id') + '/update' : 'create'), {
          'body'    : JSON.stringify(this.form.get()),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let data = await res.json();

        // set logic
        for (let key in data.result) {
          // clone to form
          this.form.set(key, data.result[key]);

          // set in opts
          if (this.props.form && data.result[key] && !this.props.model) this.props.form[key] = data.result[key];
        }
        
        // set fields
        const missing = (this.form.get('render') || []).filter((field) => !this.fields.find((f) => f.uuid === field.uuid));
        
        // push missing fields
        this.fields.push(...missing);
        
        // set forms
        if (!window.eden.forms) window.eden.forms = {};

        // set in eden
        window.eden.forms[this.form.get('id')] = data.result;

        // on save
        if (this.props.onSave) this.props.onSave(this.form);

        // set loading
        this.loading('save', false);
      }

      /**
      * loads form fields
      *
      * @param  {Object} opts
      *
      * @return {Promise}
      */
      async loadFields (opts) {
        // set opts
        if (!opts) opts = {};

        // return on loading fields
        if (this.loading.fields) return;

        // require query string
        const qs = require('querystring');

        // set opts
        opts = qs.stringify(opts);

        // set loading
        this.loading('fields', true);

        // log data
        let res = await fetch((this.form.get('id') ? '/form/' + this.form.get('id') + '/view' : '/form/create') + (opts.length ? '?' + opts : ''), {
          'method'  : 'get',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let data = await res.json();

        // set in eden
        if (data.result) {
          // set forms
          if (!window.eden.forms) window.eden.forms = {};
            
          // set in eden
          window.eden.forms[this.form.get('id')] = data.result;

          // set fields
          for (let key in data.result) {
            // set key
            this.form.set(key, data.result[key]);
          }
          
          // set fields
          const missing = (this.form.get('render') || []).filter((field) => !this.fields.find((f) => f.uuid === field.uuid));
          
          // push missing fields
          this.fields.push(...missing);

          // set loading
          this.loading('fields', false);
        }
      }

      /**
      * init dragula
      */
      initDragula () {
        // require dragula
        const dragula = require('dragula');
        const dotProp = require('dot-prop-immutable');

        // do dragula
        this.dragula = dragula(jQuery('.eden-dropzone', this.refs.form).toArray(), {
          'moves' : (el, container, handle) => {
            return (jQuery(el).is('[data-field]') || jQuery(el).closest('[data-field]').length) && (jQuery(handle).is('.move') || jQuery(handle).closest('.move').length) && (jQuery(handle).is('.move') ? jQuery(handle) : jQuery(handle).closest('.move')).attr('for') === jQuery(el).attr('data-field');
          }
        }).on('drop', (el, target, source, sibling) => {
          // get current form
          let placement = jQuery(el).attr('placement');

          // get parent
          target = jQuery(el).parent()[0];

          // check target
          if (!target || !source || !el || (target && !jQuery(target).hasClass('eden-dropzone'))) return;

          // get fields of target
          let fields = [];

          // get positions
          let positions = (this.form.get('positions') || []).map(this.filter.fix).filter((field) => field);

          // set moving on field
          positions = dotProp.set(positions, placement + '.moving', true);

          // loop physical fields
          jQuery('> [data-field]', target).each((i, field) => {
            // set get from
            let getFrom = jQuery(field).attr('placement');
            let gotField = dotProp.get(positions, getFrom);

            // return on no field
            if (!gotField) return;

            // clone field
            if (getFrom === placement) {
              // clone field
              gotField = JSON.parse(JSON.stringify(gotField));

              // delete placing
              if (gotField.moving) delete gotField.moving;
            }

            // get actual field
            fields.push(gotField);
          });

          // remove logic
          this.updating = true;
          this.update();

          // set form
          if (jQuery(target).attr('data-placement').length) {
            // set positions
            positions = dotProp.set(positions, jQuery(target).attr('data-placement'), fields);
          } else {
            // set positions
            positions = fields;
          }

          // get positions
          positions = (positions || []).map(this.filter.place).filter((field) => field);

          // update form
          this.form.set('positions', positions);

          // remove logic
          this.updating = false;
          this.update();

          // save
          this.saveForm();
        }).on('drag', (el, source) => {
          // add is dragging
          jQuery(this.$('[ref="form"]')).addClass('is-dragging');
        }).on('dragend', () => {
          // remove is dragging
          jQuery(this.$('[ref="form"]')).removeClass('is-dragging');
        }).on('over', function (el, container) {
          // add class
          jQuery(container).addClass('eden-field-over');
        }).on('out', function (el, container) {
          // remove class
          jQuery(container).removeClass('eden-field-over');
        });

        // on update
        this.on('updated', () => {
          // set containers
          this.dragula.containers = jQuery('.eden-dropzone', this.root).toArray();
        });
      }
    }
  </script>
</eden-fields>
