<field-date>
  <field ref={ ref('field') } class="field-container-inner" { ...fieldProps() }>
    <div slot="body">
      <label class="form-label" if={ !props.field.label } for={ props.getId(props.field.uuid) }>
        <a href="#!" onclick={ (e) => onUpdate(e) }>
          <i>Set Label</i>
        </a>
      </label>
      <validate type="date" group-class={ props.field.group || 'mb-3' } name={ props.getName(props.field.uuid) } label={ props.field.label } data-value={ props.dataValue } on-change={ props.onChange } required={ props.field.required } min-length={ get('field.validateLength.min', 0) } max-length={ get('field.validateLength.max', 1000) } on-change={ onChange } />
    </div>
    
    <div slot="validation">
      <div class="mb-3">
        <label class="form-label">
          Start Year
        </label>
        <input class="form-control" ref="start-year" value={ props.field.startYear || (new Date()).getFullYear() } onchange={ (e) => onStartYear(e) } />
      </div>
      <div class="mb-3">
        <label class="form-label">
          End Year
        </label>
        <input class="form-control" ref="end-year" value={ props.field.endYear || ((new Date()).getFullYear() - 80) } onchange={ (e) => onEndYear(e) } />
      </div>
    </div>
  </field>

  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class FieldDate extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.dataValue;
      }

      /**
       * on update
       */
      onUpdate(e) {
        // on update
        this.refs.field.onUpdate(e);
      }

      /**
       * return field props
       */
      fieldProps() {
        // return opts
        return {
          form      : this.props.form,
          value     : this.value,
          field     : this.props.field,
          preview   : this.props.preview,
          placement : this.props.placement,

          'onSave'   : this.props.onSave,
          'isInput'  : true,
          'onRemove' : this.props.onRemove,
        };
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();
      }

      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // return non accumulated value
        return this.$('input').value;
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onStartYear (e) {
        // set props
        const props = this.props;

        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        props.field.startYear = parseInt(e.target.value.length ? e.target.value : (new Date()).getFullYear());

        // run opts
        if (props.onSave) await props.onSave(props.field);
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onEndYear (e) {
        // set props
        const props = this.props;

        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        props.field.endYear = parseInt(e.target.value.length ? e.target.value : ((new Date()).getFullYear() - 80));

        // run opts
        if (props.onSave) await props.onSave(props.field);
      }
    }

  </script>
</field-date>
