<field-date-input>
  <div class="mb-3">
    <input class="d-none" type="hidden" name={ props.getName(props.field.uuid) } id={ props.getId(props.field.uuid) } value={ JSON.stringify(val()) } />
    <label class="form-label" for={ props.getId(props.field.uuid) }>
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
      { props.field.label }
    </label>
    <div class="d-flex flex-row">
      <div class="input-group flex-1">
        <input class="form-control" type="text" ref="date" />
        <span class="input-group-text">
          <i class="fa fa-fw fa-calendar" />
        </span>
        <button if={ value } class="btn btn-danger" onclick={ (e) => onClear(e) }>
          <i class="fa fa-fw fa-times" />
        </button>
      </div>
      <div if={ props.field.duration } class={ `ml-2 w-50 d-flex flex-row${value && value.dur && value.dur.type === 'until' ? ' flex-1' : ''}` }>
        <div class={ `input-group${value && value.dur && value.dur.type === 'lasting' ? ' w-25' : ''}` }>
          <select class="form-control" onchange={ (e) => onType(e, 'dur') }>
            <option>Select Duration</option>
            <option value="until" { ...getProps({ selected : value && value.dur && value.dur.type === 'until' }) }>
              Until
            </option>
            <option value="lasting" { ...getProps({ selected : value && value.dur && value.dur.type === 'lasting' }) }>
              Lasting
            </option>
          </select>
          
          <input class="form-control w-75" type="text" ref="duration" if={ value && value.dur && value.dur.type === 'until' } />
          <span class="input-group-text" if={ value && value.dur && value.dur.type === 'until' }>
            <i class="fa fa-fw fa-calendar" />
          </span>
        </div>
        <div class="ml-2 d-flex flex-row flex-1" if={ value && value.dur && value.dur.type === 'lasting' }>
          <input class="flex-1 form-control" placeholder="Duration Amount" type="number" value={ value && value.dur && value.dur.amount } onchange={ (e) => onAmount(e, 'dur') } />
          <eden-select class="ml-2 flex-1" on-change={ (e, r) => onPeriod(r, 'dur') } placeholder="Select Period" data={ getPeriod('dur') } />
        </div>
      </div>
    </div>
    <div if={ props.field.repeat } class="mt-2">
      <div class="form-check form-switch">
        <input class="form-check-input" id="repeat" type="checkbox" onchange={ (e) => onRepeat(e) } { ...getProps({ checked : value && value.repeat }) }>
        <label class="form-check-label" for="repeat">
          Repeat
        </label>
      </div>
    </div>
    <div class="mt-2 d-flex align-items-center flex-row" if={ value && value.repeat }>
      <input class="d-inline-flex mr-1 flex-1 form-control" placeholder="Repeat Every" type="number" value={ value && value.rep && value.rep.amount } onchange={ (e) => onAmount(e, 'rep') } />
      <eden-select class="mx-1 flex-1" on-change={ (e, r) => onPeriod(r, 'rep') } placeholder="Select Period" data={ getPeriod('rep') } />
      <eden-select class="ml-1 flex-1" on-change={ (e, r) => onEnds(r, 'rep') } placeholder="Select Ends" data={ getEnds('rep') } />
      <div if={ value && value.rep && value.rep.ends === 'until' } class="input-group d-inline-flex ml-2 w-50">
        <input class="form-control" type="text" ref="end" />
        <span class="input-group-text">
          <i class="fa fa-fw fa-calendar" />
        </span>
      </div>
    </div>
    <div if={ props.field.help && props.field.help.length } class="form-text">
      { props.field.help }
    </div>
  </div>

  <script>
    // import base
    import Base from '../../js/base';
    import moment from 'moment';

    // export default
    export default class FieldDateInput extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);

        // get start
        const check = new Date(this.props.value || {});
    
        // set initial value
        this.value = isNaN(check.getTime()) ? (this.props.value || {}) : {
          start,
        };

        // get values
        let { end, start, until } = this.value;

        // parse dates
        this.value.end = isNaN(new Date(end).getTime()) ? null : new Date(end);
        this.value.start = isNaN(new Date(start).getTime()) ? null : new Date(start);
        this.value.until = isNaN(new Date(until).getTime()) ? null : new Date(until);

        // alter value
        if (!this.value.dur && this.props.field.dur) {
          // set duration
          this.value.dur = {
            type   : 'lasting',
            amount : this.props.field.dur.amount || 1,
            period : this.props.field.dur.period || 'minute',
          };
          this.value.duration = this.props.field.dur.duration;
        }
        
        // set moment
        this.moment = moment;
      }

      /**
       * on before mount
       */
      onMounted() {
        // run super
        super.onMounted(...arguments);
        
        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
       * on before mount
       */
      onUpdated() {
        // run super
        super.onUpdated(...arguments);

        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onClear(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set value
        this.value = {};
        this.$('[ref="date"]').value = '';
        
        // update
        this.onChange();
      }

      /**
       * on repeat
       */
      onRepeat(e) {
        // set value
        if (this.value instanceof Date) {
          // objectify value
          this.value = {
            date : this.value,
          };
        }

        // set duration
        this.value.repeat = $(e.target).is(':checked');
        
        // update
        this.onChange();
      }

      /**
       * on repeat
       */
      onType(e, type) {
        // set value
        if (this.value instanceof Date) {
          // objectify value
          this.value = {
            date : this.value,
          };
        }

        // type
        if (!this.value[type]) this.value[type] = {};

        // set duration
        this.value[type].type = $(e.target).val();

        // update
        this.onChange();
      }

      /**
       * on repeat
       */
      onAmount(e, type) {
        // set value
        if (this.value instanceof Date) {
          // objectify value
          this.value = {
            date : this.value,
          };
        }

        // type
        if (!this.value[type]) this.value[type] = {};

        // set period
        this.value[type].amount = parseInt(e.target.value);

        // duration
        if (type === 'dur') {
          // duration
          this.value.duration = moment(this.value.date || new Date()).add(this.value.dur.amount, this.value.dur.period || 'minute').toDate().getTime() - (this.value.date || new Date()).getTime();
        }
        
        // update
        this.onChange();
      }

      /**
       * on repeat
       */
      onPeriod(v, type) {
        // set value
        if (this.value instanceof Date) {
          // objectify value
          this.value = {
            date : this.value,
          };
        }

        // type
        if (!this.value[type]) this.value[type] = {};

        // set period
        this.value[type].period = v;

        // duration
        if (type === 'dur') {
          // duration
          this.value.duration = moment(this.value.date || new Date()).add(this.value.dur.amount, this.value.dur.period || 'minute').toDate().getTime() - (this.value.date || new Date()).getTime();
        }

        // update
        this.onChange();
      }

      /**
       * on repeat
       */
      onEnds(v, type) {
        // set value
        if (this.value instanceof Date) {
          // objectify value
          this.value = {
            date : this.value,
          };
        }

        // type
        if (!this.value[type]) this.value[type] = {};

        // set period
        this.value[type].ends = v;

        // update
        this.onChange();
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange() {
        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.val());
        }
      }

      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // return value
        return this.value;
      }

      /**
       * init
       */
      init() {
        // Using font-awesome 5 icons
        $.extend(true, $.fn.datetimepicker.defaults, {
          icons : {
            up       : 'fa fa-arrow-up',
            time     : 'fa fa-clock',
            date     : 'fa fa-calendar',
            down     : 'fa fa-arrow-down',
            next     : 'fa fa-chevron-right',
            close    : 'fa fa-times-circle',
            clear    : 'fa fa-trash-alt',
            today    : 'fa fa-calendar-check',
            previous : 'fa fa-chevron-left',
          }
        });

        // duration
        let duration = (this.value || {}).duration || 0;

        // set date
        let start = (this.value || {}).start || null;
        let until = (this.value || {}).until || null;

        // set end
        let end = start && new Date(start.getTime() + duration);

        // set values
        this.value.end = end;
        this.value.start = start;
        this.value.until = until;
        
        // add datetime picker
        if (this.$('[ref="end"]')) $(this.$('[ref="end"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : until,
        }).on('dp.change', (e) => {
          // set ends
          until = e.date && e.date.toDate();

          // set value
          this.value.until = until;

          // set value
          $(this.$('[type="hidden"]')).val(JSON.stringify(this.value));

          // on change
          this.onChange(e);
        });
        
        // add datetime picker
        if (this.$('[ref="duration"]')) $(this.$('[ref="duration"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : end || start || new Date(),
        }).on('dp.change', (e) => {
          // set value
          this.value.end = e.date && e.date.toDate();
          this.value.start = start;
          this.value.duration = (e.date && e.date.toDate()).getTime() - start.getTime();

          // set value
          $(this.$('[type="hidden"]')).val(JSON.stringify(this.value));

          // on change
          this.onChange(e);
        });
        
        // add datetime picker
        $(this.$('[ref="date"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : start || new Date(),
        }).on('dp.change', (e) => {
          // get date
          start = e.date && e.date.toDate();
          end = new Date(start.getTime() + duration);

          // set value
          if (this.value instanceof Date) {
            this.value = start;
          } else {
            this.value.start = start;
          }

          // set value
          $(this.$('[type="hidden"]')).val(JSON.stringify(this.value));

          // on change
          this.onChange(e);
        });
      }

      /**
       * get value
       */
      getPeriod(type) {
        // durs
        const durs = ['Day', 'Week', 'Month', 'Year'];

        // return triggers
        return (type === 'dur' ? ['Minute', 'Hour', ...durs] : durs).map((repeat) => {
          // return object
          return {
            name     : `${repeat}(s)`,
            value    : repeat.toLowerCase(),
            selected : this.value && this.value[type] && this.value[type].period === repeat.toLowerCase(),
          };
        });
      }

      /**
       * get ends
       */
      getEnds(type) {
        // return triggers
        return ['Forever', 'Until'].map((ends) => {
          // return object
          return {
            name     : ends,
            value    : ends.toLowerCase(),
            selected : this.value && this.value[type] && this.value[type].ends === ends.toLowerCase(),
          };
        });
      }

      /**
       * on format
       */
      getFormat() {
        // get format
        return this.props.field.format || 'MMMM DD YYYY, LT';
      }

      /**
       * get props
       */
      getProps(obj) {
        // return get props
        return Object.keys(obj).reduce((accum, key) => {
          // set accum
          if (obj[key]) accum[key] = true;

          // return accum
          return accum;
        }, {});
      }
    }

  </script>
</field-date-input>