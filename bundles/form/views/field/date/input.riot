<field-date-input>
  <div class="mb-3">
    <label class="form-label" for={ props.getId(props.field.uuid) }>
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
      { props.field.label }
    </label>
    <div class="input-group" if={ !loading('type') }>
      <input class="form-control" type="text" ref="date" />
      <input class="d-none" type="hidden" name={ props.getName(props.field.uuid) } id={ props.getId(props.field.uuid) } value={ val() ? val().toISOString() : '' } />
      <span class="input-group-text">
        <i class="fa fa-calendar" />
      </span>
      <button if={ value } class="btn btn-danger" onclick={ (e) => onClear(e) }>
        <i class="fa fa-times" />
      </button>
    </div>
    <div if={ props.field.help && props.field.help.length } class="form-text">
      { props.field.help }
    </div>
  </div>

  <script>
    // import base
    import Base from '../../js/base';

    // export default
    export default class FieldDateInput extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.value;
      }

      /**
       * on before mount
       */
      onMounted() {
        // run super
        super.onMounted(...arguments);
        
        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
       * on before mount
       */
      onUpdated() {
        // run super
        super.onUpdated(...arguments);

        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onClear(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set value
        this.value = null;
        this.$('[ref="date"]').value = '';

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.val());
        }
      }

      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // return non accumulated value
        return this.value ? new Date(this.value) : this.$('[ref="date"]').value ? new Date(this.$('[ref="date"]').value) : null;
      }

      /**
       * init
       */
      init() {
        // Using font-awesome 5 icons
        $.extend(true, $.fn.datetimepicker.defaults, {
          icons : {
            up       : 'fa fa-arrow-up',
            time     : 'fa fa-clock',
            date     : 'fa fa-calendar',
            down     : 'fa fa-arrow-down',
            next     : 'fa fa-chevron-right',
            close    : 'fa fa-times-circle',
            clear    : 'fa fa-trash-alt',
            today    : 'fa fa-calendar-check',
            previous : 'fa fa-chevron-left',
          }
        });
        
        // add datetime picker
        $(this.$('[ref="date"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : this.value,
        }).on('dp.change', (e) => {
          // set value
          this.value = e.date && e.date.toDate();

          // set value
          $(this.$('[type="hidden"]')).val(this.value ? this.value.toISOString() : '');

          // on change
          this.onChange(e);
        });
      }

      /**
       * on format
       */
      getFormat() {
        // get format
        return this.props.field.format || 'MMMM DD YYYY, LT';
      }
    }

  </script>
</field-date-input>