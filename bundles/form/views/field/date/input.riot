<field-date-input>
  <div class="mb-3">
    <label class="form-label" for={ props.getId(props.field.uuid) }>
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
      { props.field.label }
    </label>
    <div class="input-group" if={ !loading('type') }>
      <input class="form-control" type="text" ref="date" />
      <input class="d-none" type="hidden" name={ props.getName(props.field.uuid) } id={ props.getId(props.field.uuid) } value={ JSON.stringify(val()) } />
      <span class="input-group-text" if={ isRepeat() }>
        Every:&nbsp;
        <b>{ value.period || 1 } { value.repeat || 'day' }</b>
        &nbsp;
        <span if={ isEnds() }>
          Until:&nbsp;
          <b>{ moment(value.end || new Date()).format(getFormat()) } { '' }</b>
        </span>
      </span>
      <span class="input-group-text">
        <i class="fa fa-fw fa-calendar" />
      </span>
      <button class={ `btn btn-${isRepeat() ? 'info' : 'secondary'} dropdown-toggle` } data-toggle="dropdown" aria-expanded="false">
        <i class="fa fa-fw fa-repeat" />
      </button>

      <div class="dropdown-menu dropdown-menu-right p-2">
        <div class="d-flex align-items-center flex-row">
          Repeat Every&nbsp;
          <input class="d-inline-flex mx-1 flex-1 form-control" type="number" value={ value && value.period ? value.period : 1 } />
          <eden-select class="d-inline-flex flex-1 mx-1" on-change={ (e, r) => onRepeat(r) } placeholder="Select Repeat" data={ getRepeat() } />
          <eden-select class="d-inline-flex flex-1 me-1" on-change={ (e, r) => onEnds(r) } placeholder="Select Ends" data={ getEnds() } />
        </div>
        <div if={ isEnds() } class="mt-3">
          <input class="form-control" type="text" ref="end" />
        </div>
      </div>

      <button if={ value } class="btn btn-danger" onclick={ (e) => onClear(e) }>
        <i class="fa fa-fw fa-times" />
      </button>
    </div>
    <div if={ props.field.help && props.field.help.length } class="form-text">
      { props.field.help }
    </div>
  </div>

  <script>
    // import base
    import Base from '../../js/base';
    import moment from 'moment';

    // export default
    export default class FieldDateInput extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.value;
        this.moment = moment;
      }

      /**
       * on before mount
       */
      onMounted() {
        // run super
        super.onMounted(...arguments);
        
        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
       * on before mount
       */
      onUpdated() {
        // run super
        super.onUpdated(...arguments);

        // on change
        if (!this.eden.frontend) return;

        // init
        this.init();
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onClear(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set value
        this.value = null;
        this.$('[ref="date"]').value = '';

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }

      /**
       * on repeat
       */
      onEnds(v) {
        // set value
        this.value = {
          end    : (this.val() || {}).end,
          ends   : v,
          start  : this.$('[ref="date"]') && this.$('[ref="date"]').value ? new Date(this.$('[ref="date"]').value) : null,
          repeat : (this.val() || {}).repeat,
        };

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.val());
        }
      }

      /**
       * on repeat
       */
      onRepeat(v) {
        console.log(this.val() || {});
        // set value
        this.value = {
          end    : (this.val() || {}).end,
          ends   : (this.val() || {}).ends,
          start  : this.$('[ref="date"]') && this.$('[ref="date"]').value ? new Date(this.$('[ref="date"]').value) : null,
          repeat : v,
        };

        console.log(this.value);

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.val());
        }
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.val());
        }
      }

      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // check value
        if (this.isRepeat()) {
          // return repeated
          return {
            end    : this.$('[ref="end"]') && this.$('[ref="end"]').value ? new Date(this.$('[ref="end"]').value) : null,
            ends   : this.value.ends,
            start  : this.$('[ref="date"]') && this.$('[ref="date"]').value ? new Date(this.$('[ref="date"]').value) : null,
            repeat : this.value.repeat,
          };
        }

        // return non accumulated value
        return this.value ? new Date(this.value) : this.$('[ref="date"]').value ? new Date(this.$('[ref="date"]').value) : null;
      }

      /**
       * init
       */
      init() {
        // Using font-awesome 5 icons
        $.extend(true, $.fn.datetimepicker.defaults, {
          icons : {
            up       : 'fa fa-arrow-up',
            time     : 'fa fa-clock',
            date     : 'fa fa-calendar',
            down     : 'fa fa-arrow-down',
            next     : 'fa fa-chevron-right',
            close    : 'fa fa-times-circle',
            clear    : 'fa fa-trash-alt',
            today    : 'fa fa-calendar-check',
            previous : 'fa fa-chevron-left',
          }
        });
        
        // add datetime picker
        if (this.$('[ref="end"]')) $(this.$('[ref="end"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : (this.val() || {}).end || new Date(),
        }).on('dp.change', (e) => {
          // set value
          this.value.end = e.date && e.date.toDate();

          // set value
          $(this.$('[type="hidden"]')).val(JSON.stringify(this.value));

          // on change
          this.onChange(e);
        });
        
        // add datetime picker
        $(this.$('[ref="date"]')).datetimepicker({
          format      : this.getFormat(),
          defaultDate : (this.val() || {}).start || this.val(),
        }).on('dp.change', (e) => {
          // set value
          if (this.isRepeat()) {
            this.value.start = e.date && e.date.toDate();
          } else {
            this.value = e.date && e.date.toDate();
          }

          // set value
          $(this.$('[type="hidden"]')).val(JSON.stringify(this.value));

          // on change
          this.onChange(e);
        });
      }

      /**
       * get ends
       */
      getEnds() {
        // return triggers
        return ['Forever', 'Until'].map((ends) => {
          // return object
          return {
            name     : ends,
            value    : ends.toLowerCase(),
            selected : (this.val() || {}).ends === ends.toLowerCase(),
          };
        });
      }

      /**
       * get value
       */
      getRepeat() {
        // return triggers
        return ['Day', 'Week', 'Month', 'Year'].map((repeat) => {
          // return object
          return {
            name     : repeat,
            value    : repeat.toLowerCase(),
            selected : (this.val() || {}).repeat === repeat.toLowerCase(),
          };
        });
      }

      /**
       * repeat
       */
      isEnds() {
        // repeat date
        return (this.value || {}).ends === 'until';
      }

      /**
       * repeat
       */
      isRepeat() {
        // repeat date
        return (this.value || {}).start && ((this.value || {}).repeat || (this.value || {}).ends);
      }

      /**
       * on format
       */
      getFormat() {
        // get format
        return this.props.field.format || 'MMMM DD YYYY, LT';
      }
    }

  </script>
</field-date-input>