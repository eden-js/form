<field-div>
  <field ref={ ref('field') } class="field-container-inner" { ...fieldProps() }>
    <div slot="body">
      <span class="eden-dropzone-label" if={ !props.preview }>
        Div #{ props.placement }
      </span>

      <div class={ `${props.field.container || 'div'} ${!props.preview ? 'eden-dropzone' : ''} ${classes({ 'empty' : !getFields(props.field.children).length })}` } data-placement={ `${props.placement}.children` }>
        <div if={ !getFields(props.field.children).length } class="py-5 text-center">Add Elements</div>
        <div each={ (child, a) in getFields(props.field.children) } no-reorder class={ child.class } is={ getElement(child) } form={ props.form } preview={ props.preview } data-field={ child.uuid } data={ props.getField(child) } field={ child } helper={ props.helper } get-field={ props.getField } on-add-field={ props.onAddField } on-save={ props.onSave } on-remove={ props.onRemove } on-refresh={ props.onRefresh } i={ a } placement={ `${props.placement}.children.${a}` } />
      </div>

      <span class="eden-dropzone-label eden-dropzone-label-end" if={ !props.preview }>
        Div #{ props.placement } End
      </span>
    </div>

    <div slot="modal">
      <div class="form-group">
        <label>
          Div Class
        </label>
        <input class="form-control" ref="div" value={ props.field.div } onchange={ (e) => onDivClass(e) } />
      </div>
    </div>
  </field>

  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class FieldDiv extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // set value
        if (!this.props.field.children) this.props.field.children = [];
      }

      /**
       * return field props
       */
      fieldProps() {
        // return opts
        return {
          form      : this.props.form,
          field     : this.props.field,
          preview   : this.props.preview,
          placement : this.props.placement,

          'onSave'   : this.props.onSave,
          'isInput'  : false,
          'onRemove' : this.props.onRemove,
          'getField' : this.props.getField,
        };
      }
  
      /**
      * on save
      *
      * @param  {Event} e
      *
      * @return {*}
      */
      async onSave(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // set loading
        this.loading('save', true);
        
        // save
        if (this.props.onSave) await this.props.onSave(this.props.row, this.props.column, this.refs.field.val());
        
        // set loading
        this.loading('save', false);
      }

      /**
      * get fields
      *
      * @param  {Array} fields
      *
      * @return {Array}
      */
      getFields (fields) {
        // return filtered fields
        return (fields || []).filter((child) => child);
      }
      
      /**
      * get data
      *
      * @return {*}
      */
      getField() {
        // return object assign
        return Object.assign({}, this.props.column.meta.field, {

        });
      }

      /**
      * get element
      *
      * @param  {Object} child
      *
      * @return {*}
      */
      getElement (child) {
        // return get child
        return (this.props.getField(child) || {}).tag ? `field-${this.props.getField(child).tag}` : 'eden-loading';
      }
      
      /**
      * get data
      *
      * @return {*}
      */
      getData() {
        // return object assign
        return Object.assign({}, this.props.column.meta.data, {
          label : null,
          value : this.props.dataValue
        });
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onDivClass (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.div = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement);
      }
    }
  </script>
</field-div>
