<field-checkbox-input>
  <div class={ props.field.group || 'mb-3' }>
    <label class="form-label">
      { props.field.label }
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </label>
    <span if={ !get('field.options', []).length }>
      Add Options
    </span>
    <div each={ (option, i) in get('field.options', []) } class={ `${value.includes(option.label) && props.field.hideCompleted && !state.all ? 'd-none' : ''}` }>
      <validate type="checkbox" read-only={ !props.shouldRead(props.field) } group-class={ props.field.group || '' } name={ props.getName(`${props.field.uuid}[${option.label}]`) } label={ option.label } data-value={ option.value } required={ props.field.required } on-change={ onChange } checked={ value.includes(option.label) } />
    </div>
    <div if={ props.field.hideCompleted && getVisibleOptions(true).length } class="form-text">
      <a if={ !state.all } href="#!" onclick={ (e) => onShowAll(e) }>
        + { getVisibleOptions(true).length } Completed
      </a>
      <a if={ state.all } href="#!" onclick={ (e) => onShowAll(e) }>
        Hide Completed
      </a>
    </div>
    <div if={ props.field.help && props.field.help.length } class="form-text">
      { props.field.help }
    </div>
  </div>

  <script>
    // import base
    import Base from '../../js/base';

    // export default
    export default class FieldCheckboxInput extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.value || [];
      }

      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // return non accumulated value
        return (this.get('field.options', []) || []).filter((opt) => {
          return $(`input[value="${opt.value}"]`).is(':checked');
        }).map((opt) => opt.value);
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }

      /**
       * on show all
       */
      onShowAll(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update
        this.update({
          all : !this.state.all,
        });
      }

      /**
       * get visible options
       */
      getVisibleOptions(hidden = false) {
        // get options
        const allOptions = this.get('field.options', []);

        // check if show
        if (this.state.all && !hidden) return allOptions;
        if (!this.props.field.hideCompleted && !hidden) return allOptions;

        // filter options
        return allOptions.filter((opt) => {
          // check value
          return this.value.includes(opt.label) === hidden;
        });
      }
    }

  </script>
</field-checkbox-input>