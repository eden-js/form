<field-address-input>
  <div class={ props.field.group || 'mb-3' }>
    <label class="form-label" for={ props.getId(`${props.field.uuid}-geo`) }>
      { props.field.label }
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </label>
    <input type="hidden" name={ props.getName(`${props.field.uuid}`) } value={ JSON.stringify(value) } />

    <div class="input-group">
      <input type="text" ref="formatted" required={ props.field.required } class={ `${props.field.field || 'form-control'}` } id={ props.getId(`${props.field.uuid}-geo`) } value={ get('value.formatted') || '' } autocomplete="nofill" on-change={ onChange }>
      <button class={ `btn btn-${value.custom ? 'primary' : 'secondary'}` } onclick={ (e) => onCustom(e) }>
        <i class="fa fa-pencil" />
      </button>
      <!--
      <button class={ `btn btn-${value.map ? 'primary' : 'secondary'}` } onclick={ (e) => onMap(e) }>
        <i class="fa fa-map" />
      </button>
      -->
    </div>

    <div if={ value.custom } class="row mt-3">
      <div class="col-4 mb-3">
        <label class="form-label" for={ props.getId(`${props.field.uuid}-number`) }>
          Street Number
        </label>
        <input class="form-control" placeholder="Street Number" value={ getComponent('number') } onchange={ (e) => onComponent(e, 'number') } id={ props.getId(`${props.field.uuid}-number`) } />
      </div>
      <div class="col-8 mb-3">
        <label class="form-label" for={ props.getId(`${props.field.uuid}-street`) }>
          Street Name
        </label>
        <input class="form-control" placeholder="Street Name" value={ getComponent('street') } onchange={ (e) => onComponent(e, 'street') } id={ props.getId(`${props.field.uuid}-street`) } />
      </div>
      <div class="col-4">
        <label class="form-label" for={ props.getId(`${props.field.uuid}-city`) }>
          City
        </label>
        <input class="form-control" placeholder="City" value={ getComponent('city') } onchange={ (e) => onComponent(e, 'city') } id={ props.getId(`${props.field.uuid}-city`) } />
      </div>
      <div class="col-4">
        <label class="form-label" for={ props.getId(`${props.field.uuid}-state`) }>
          State
        </label>
        <input class="form-control" placeholder="State" value={ getComponent('state') } onchange={ (e) => onComponent(e, 'state') } id={ props.getId(`${props.field.uuid}-state`) } />
      </div>
      <div class="col-4">
        <label class="form-label" for={ props.getId(`${props.field.uuid}-postcode`) }>
          Postcode
        </label>
        <input class="form-control" placeholder="Postcode" value={ getComponent('postcode') } onchange={ (e) => onComponent(e, 'postcode') } id={ props.getId(`${props.field.uuid}-postcode`) } />
      </div>
    </div>

    <div if={ props.field.help && props.field.help.length } class="form-text">
      { props.field.help }
    </div>
  </div>

  <script>
    // import base
    import Base from '../../js/base';

    // export default
    export default class FieldAddress extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);
    
        // set initial value
        this.value = this.props.value || {};
      }

      /**
       * on mounted
       */
      onMounted() {
        // on mounted
        super.onMounted(...arguments);

        // check jQuery
        if (this.eden.frontend) {
          // render location
          this.initialize();
        }
      }

      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // get val
        return this.value;
      }

      /**
       * on custom
       */
      onCustom(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set custom
        this.value.custom = !this.value.custom;
        this.update();
      }

      /**
       * on custom
       */
      onComponent(e, key) {
        // check json
        if (!this.value.json) this.value.json = {};

        // set value
        this.value.json[key] = e.target.value;

        // set formatted
        this.value.formatted = `${this.value.json.number || ''} ${this.value.json.street || ''}, ${this.value.json.city || ''} ${this.value.json.state || ''}, ${this.value.json.country || ''}`;
        this.$('[ref="formatted"]').value = this.value.formatted;
        
        // update
        this.update();
      }

      /**
       * on custom
       */
      onMap(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set custom
        this.value.map = !this.value.map;
        this.update();
      }

      /**
       * on change
       *
       * @param {Event} e
       */
      onChange(e) {
        // set value
        this.value = this.val();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }

      /**
       * get component
       */
      getComponent(key) {
        // get component
        return (this.value.json || {})[key] || null;
      }

      /**
        * renders location input
        */
      initialize () {
        // let input
        const input = this.$('[type="text"]');
        const index = input.getAttribute('data-index');

        // build geocomplete
        $(input).geocomplete().on('geocode:result', (e, result) => {
          // set values
          this.value = {
            id  : result.id,
            geo : {
              lat : result.geometry.location.lat(),
              lng : result.geometry.location.lng()
            },
            json : {
              city     : (result.address_components.find((c) => c.types.includes('locality')) || {}).short_name,
              state    : (result.address_components.find((c) => c.types.includes('administrative_area_level_1')) || {}).short_name,
              street   : (result.address_components.find((c) => c.types.includes('route')) || {}).long_name,
              number   : (result.address_components.find((c) => c.types.includes('street_number')) || {}).long_name,
              country  : (result.address_components.find((c) => c.types.includes('country')) || {}).long_name,
              postcode : (result.address_components.find((c) => c.types.includes('postal_code')) || {}).long_name,
            },
            formatted  : this.$('[ref="formatted"]').value,
            components : result.address_components
          };

          // update view
          this.update();
        });
      }
    }
  </script>
</field-address-input>