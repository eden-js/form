<field-wysiwyg>
  <field ref={ ref('field') } class="field-container-inner" { ...fieldProps() }>
    <div slot="body">
      <label class="form-label" if={ !props.field.label } for={ props.getId(props.field.uuid) }>
        <a href="#!" onclick={ (e) => onUpdate(e) }>
          <i>Set Label</i>
        </a>
      </label>
      <div if={ get('field.i18n') } each={ (lng, i) in eden.get('i18n.lngs', []) } hide={ eden.get('i18n.lang') !== lng }>
        <editor show-toolbar={ true } name={ props.getName(`${props.field.uuid}[${lng}]`) } label={ props.field.label } content={ get(`dataValue.${eden.get('i18n.lng')}`, get('dataValue', '')) } required={ props.field.required } on-change={ onChange } />
      </div>
      <editor show-toolbar={ true } if={ !get('field.i18n') } name={ props.getName(props.field.uuid) } label={ props.field.label } content={ get(`dataValue.${eden.get('i18n.lng')}`, get('dataValue', '')) } required={ props.field.required } on-change={ onChange } />
    </div>
  </field>
  
  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class FieldWysiwyg extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.dataValue;
      }

      /**
       * on update
       */
      onUpdate(e) {
        // on update
        this.refs.field.onUpdate(e);
      }

      /**
       * return field props
       */
      fieldProps() {
        // return opts
        return {
          form      : this.props.form,
          value     : this.value,
          field     : this.props.field,
          preview   : this.props.preview,
          placement : this.props.placement,

          'onSave'   : this.props.onSave,
          'isInput'  : true,
          'onRemove' : this.props.onRemove,
        };
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();
      }
    
      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // get val
        if (this.props.field.i18n) {
          // reduce value
          return this.eden.get('i18n.lngs', []).reduce((accum, language) => {
            // add to accum
            accum[language] = $(`[name="${props.getName(`${this.props.field.uuid}[${language}]`)}"]`, this.root).val();
            
            // return accum
            return accum;
          }, {});
        } else {
          // return non accumulated value
          return $('textarea', this.root).val();
        }
      }
    }
    
  </script>
</field-wysiwyg>
