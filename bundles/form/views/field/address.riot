<field-address>
  <field ref={ ref('field') } is-input={ true } class="field-container-inner" value={ value } field={ props.field } get-fields={ props.getFields } get-element={ props.getElement } on-change={ (e) => onChange(e) }>
    <div slot="body">
      <div class={ props.field.group || 'form-group' }>
        <label for={ `${props.field.uuid}-geo` }>
          { props.field.label }
          <i if={ !props.field.label }>Set Label</i>
        </label>
        <input type="hidden" name={ `${props.field.uuid}[address]` } value={ JSON.stringify(props.value) } />
        <input type="text" name={ `${props.field.uuid}[geo]` } required={ props.field.required } class={ `${props.field.field || 'form-control'}` } id={ `${props.field.uuid}-geo` } value={ get('value.formatted') || '' } on-change={ props.onChange }>
      </div>
    </div>
  </field>
  
  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class AddressField extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);
    
        // set initial value
        this.value = this.props.data.value;
      }

      /**
       * on mounted
       */
      onMounted() {
        // on mounted
        super.onMounted(...arguments);

        // check jQuery
        if (this.eden.frontend) {
          // render location
          this.initialize();
        }
      }

      /**
       * return value
       *
       * @return {*}
       */
      val() {
        // get val
        return this.value;
      }

      /**
       * on change
       *
       * @param {Event} e
       */
      onChange(e) {
        // set value
        this.props.data.value = this.val();

        // emit update
        
      }

      /**
        * renders location input
        */
      initialize () {
        // let input
        let input = this.$('[type="text"]');
        console.log(input);
        let index = input.getAttribute('data-index');

        // build geocomplete
        jQuery(input).geocomplete().on('geocode:result', (e, result) => {
          // set values
          this.value = {
            'id'  : result.id,
            'geo' : {
              'lat' : result.geometry.location.lat(),
              'lng' : result.geometry.location.lng()
            },
            'formatted'  : result.formatted_address,
            'components' : result.address_components
          };

          // update view
          this.update();
        });
      }
    }
  </script>
</field-address>
