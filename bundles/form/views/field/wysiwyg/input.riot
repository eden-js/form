<field-wysiwyg-input>
  <div>
    <label class="form-label" if={ !props.field.label } for={ props.getId(props.field.uuid) }>
      <a href="#!" onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </label>
    <editor ref={ ref('wysiwyg') } show-toolbar={ true } name={ props.getName(props.field.uuid) } label={ props.field.label } placeholder={ props.field.placeholder } content={ get(`value.${eden.get('i18n.lng')}`, get('value', '')) } required={ props.field.required } on-change={ onChange } />
  </div>
  
  <script>
    // import base
    import Base from '../../js/base';

    // export default
    export default class FieldWysiwygInput extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);

        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.value;
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = (this.val() || '').replace('<p><br></p>', '').trim();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }
    
      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // return non accumulated value
        return this.refs.wysiwyg ? this.refs.wysiwyg.val() : $('textarea', this.root).val();
      }
    }
    
  </script>
</field-wysiwyg-input>
