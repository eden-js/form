<field-image>
  <field ref={ ref('field') } class="field-container-inner" { ...fieldProps() }>
    <div slot="body">
      <div class="form-group">
        <label for={ props.getId(props.field.uuid) }>
          { props.field.label }
          <i if={ !props.field.label }>Set Label</i>
        </label>
        <upload name={ props.getName(props.field.uuid) } multi={ props.field.multiple } image={ props.data.value } col={ props.field.col } show-type={ props.field.input } on-change={ onChange } />
      </div>
    </div>
    
    <div slot="modal">
      <div class="form-group">
        <label>
          Field Column
        </label>
        <input class="form-control" ref="col" value={ props.field.col } onchange={ (e) => onCol(e) } />
      </div>
      <div class="form-group">
        <label>
          Input Type
        </label>
        <select class="form-control" ref="input" value={ props.field.input } onchange={ (e) => onInput(e) }>
          <option value="box">Boxed</option>
          <option value="input">Input</option>
        </select>
      </div>
    </div>
  </field>
  
  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class FieldImage extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);
    
        // set initial value
        this.value = this.props.data.value;
      }

      /**
       * return field props
       */
      fieldProps() {
        // return opts
        return {
          form      : this.props.form,
          value     : this.value,
          field     : this.props.field,
          preview   : this.props.preview,
          placement : this.props.placement,

          'onSave'   : this.props.onSave,
          'isInput'  : true,
          'onRemove' : this.props.onRemove,
        };
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onCol(e) {
        // set class
        this.props.field.col = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement);
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onInput(e) {
        // set class
        this.props.field.input = jQuery(e.target).val();

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement);
      }
    }
    
  </script>
</field-image>
