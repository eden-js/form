<field-tab-display>
  <div class="tab-display">
  
    <div class="form-group" if={ props.isInput }>
      <label>
        Label
      </label>
      <input class="form-control" ref="label" value={ get('field.label', '') } onchange={ (e) => onLabel(e) } />
    </div>
    
    <div class="form-group" if={ props.isMultiple }>
      <label>
        Multiple Values
      </label>
      <select class="form-control" onchange={ (e) => onAllowMultiple(e) }>
        <option value="true" selected={ props.field.multiple }>Yes</option>
        <option value="false" selected={ !props.field.multiple }>No</option>
      </select>
    </div>
    
    <div class="form-group">
      <label>
        Container Class
      </label>
      <input class="form-control" ref="class" value={ get('field.class', '') } onchange={ (e) => onClass(e) } />
    </div>
    
    <div if={ props.isInput }>
      <div class="form-group">
        <label>
          Group Class
        </label>
        <input class="form-control" ref="group" value={ get('field.group', 'form-group') } onchange={ (e) => onGroupClass(e) } />
      </div>
      <div class="form-group">
        <label>
          Input Class
        </label>
        <input class="form-control" ref="field" value={ get('field.field', 'form-control') } onchange={ (e) => onFieldClass(e) } />
      </div>
      
      <div if={ props.i18n }>
        <div class="form-group">
          <label>
            Enable i18n
          </label>
          <select class="form-control" onchange={ (e) => onLanguage(e) }>
            <option value="true" selected={ props.field.i18n }>Yes</option>
            <option value="false" selected={ !props.field.i18n }>No</option>
          </select>
        </div>
      </div>
    </div>
    
  </div>
  
  <script>
    // import base
    import Base from '../../js/base';

    // export default
    export default class FieldTabDisplay extends Base {
      /**
       * on before mount
       */
      onBeforeMount() {
        // run super
        super.onBeforeMount(...arguments);
      }

      /**
       * on class
       *
       * @param  {Event} e
       */
      async onLabel (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.label = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on class
       *
       * @param {Event} e
       */
      async onClass (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.class = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on class
       *
       * @param  {Event} e
       */
      async onGroupClass (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.group = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on class
       *
       * @param  {Event} e
       */
      async onFieldClass (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.field = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on allow multiple
       *
       * @param  {Event}  e
       *
       * @return {Promise}
       */
      async onAllowMultiple (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.multiple = jQuery(e.target).val() === 'true';

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }

      /**
       * on allow multiple
       *
       * @param  {Event}  e
       *
       * @return {Promise}
       */
      async inI18n (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.field.i18n = jQuery(e.target).val() === 'true';

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.field, this.props.data, this.props.placement, true);
      }
    }
  
  </script>
</field-tab-display>
