<form-render>
  <div>

    <form if={ !loading('form') && props.action && !props.noForm } method={ props.method || 'post' } action={ props.action || getForm().action || '/form/submit' } class={ getClass() }>
      <slot name="prepend" />
      <eden-fields class="form-render-fields" ref={ ref('fields') } get-id={ props.getId } get-name={ props.getName } data-form={ props.placement } fields={ getFields() } preview={ props.preview } form={ getForm() } on-save={ onSave } placement={ props.placement } positions={ props.positions } />
      <slot name="append" />
    </form>

    <div if={ !loading('form') && !props.action || props.noForm }>
      <eden-fields class="form-render-fields" ref={ ref('fields') } get-id={ props.getId } get-name={ props.getName } data-form={ props.placement } fields={ getFields() } preview={ props.preview } form={ getForm() } on-save={ onSave } placement={ props.placement } positions={ props.positions } />
    </div>

    <div if={ loading('form') } class="text-center">
      <i class="h1 my-5 fa fa-spinner fa-spin" />
    </div>

  </div>

  <script>
    // import base
    import Base from '../js/base';

    // export default
    export default class FormRender extends Base {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // super
        super.onBeforeMount(...args);

        // bind methods
        this.onSave = this.onSave.bind(this);

        // is update
        this.isUpdate = false;
      }

      /**
       * on before mount
       */
      onUpdated(...args) {
        // super
        super.onUpdated(...args);
        
        // check placement
        if (this.props.placement !== this.placement) {
          // set placement
          this.placement = this.props.placement;

          // laod form
          this.loading('form', true);
          
          // reset form
          setTimeout(() => this.loading('form', false), 10);
        }
      }

      /**
       * on save forms
       *
       * @return {Model}
       */
      onSave (form) {
        // get forms
        let forms = this.eden.get('forms') || {};

        // set form
        forms[this.props.placement] = form.get();

        // set forms
        this.eden.set('forms', forms);
      }

      /**
       * on update name
       *
       * @param  {Event} e
       */
      onToggleUpdate (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set update
        this.isUpdate = !this.isUpdate;

        // update
        this.update();
      }

      /**
       * add load fields function
       *
       * @return {*}
       */
      loadFields () {
        // return internal proxied
        return this.refs.fields.loadFields(...arguments);
      }

      /**
       * gets fields
       *
       * @return {Array}
       */
      getFields () {
        // check for fields
        return this.eden.get('fields') || [];
      }

      /**
       * get class
       */
      getClass() {
        // return
        return `form-render form-${(this.props.placement || '').split('.').join('-')}`;
      }

      /**
       * returns form
       *
       * @return {Object}
       */
      getForm () {
        // return form
        return this.props.form || ((this.eden.get('forms') || {})[this.props.placement] ? this.eden.get('forms')[this.props.placement] : {
          'placement' : this.props.placement
        });
      }
      
      /**
       * submit form
       *
       * @return {*}
       */
      async submit (isJSON) {
        // check json
        if (!isJSON) {
          // submit form
          return eden.router.submit(this.$('form'));
        } else {
          // Get url
          let url = this.props.action || this.$('form').getAttribute('action') || window.location.href.split(this.eden.get('config').domain)[1];

          // Set request
          const opts = {
            method  : this.props.method || this.$('form').getAttribute('method') || 'POST',
            headers : {
              Accept : 'application/json',
            },
            redirect    : 'follow',
            credentials : 'same-origin',
          };

          // Set body
          if (this.props.method.toUpperCase() === 'POST') {
            // Set to body
            opts.body = new FormData(this.$('form'));
          } else {
            // Add to url
            url += `?${jQuery(this.$('form')).serialize()}`;
          }

          // Run fetch
          const res = await fetch(url, opts);

          // Run json
          return await res.json();
        }
      }
    }
  </script>
</form-render>
